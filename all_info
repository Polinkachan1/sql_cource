//1)Базовый синтаксис SQL запроса  
//Одна из основных функций SQL — это получение выборок данных из СУБД. Для этого в SQL используется оператор SELECT.
//Вывод произвольных значений
SELECT "Hello world"
//Вывод всех данных из таблицы
SELECT * FROM FamilyMembers
//Вывод данных из определённых колонок таблицы
SELECT member_id, member_name FROM FamilyMembers
//Псевдонимы
В случае, если мы хотим вывести какие-то столбцы таблицы, но чтобы в итоговой выборке они были названы иначе, мы можем использовать псевдонимы (их также называют алиасами).
SELECT member_id, member_name AS Name FROM FamilyMembers
ИЛИ
SELECT member_id, member_name Name FROM FamilyMembers
Псевдонимы могут содержать до 255 знаков (включая пробелы, цифры и специальные символы).
2)Литералы в SQL
//Литерал — это указанное явным образом фиксированное значение, например, число 12 или строка "SQL".
//Основными типами литералов в MySQL являются:
строковый
числовой
логический
NULL
литерал даты и времени
//Строковые литералы
//Строка — это последовательность символов, заключённых в одинарные (') или двойные (") кавычки.
SELECT "Строка \n Другая строка" as String
//Числовые литералы
Включает в себя целые и дробные числа. Разделительный знак для дробного числа — «.» (точка).	1, 2.9, 0.01
Может иметь только целую, дробную часть или обе сразу.	.2, 1.1, 10
Может быть положительным и отрицательным числом (для положительного числа совсем не обязательно указывать знак).	+1, -10, -2.2
Могут быть представлены в экспоненциальном виде.	1e3 (=1000) 1e-3 (=0.001)
//Арифметические операторы
//Оператор	Описание	Пример
%, MOD	Деление по модулю	11 % 5 = 1
*	Умножение	10 * 16 = 160
+	Сложение	98 + 2 = 100
-	Вычитание	50 - 51 = -1
/	Деление	1 / 2 = 0.5
DIV	Целочисленное деление	10 DIV 4 = 2
//Пример
SELECT (5 * 2 - 6) / 2 AS Result;
//Литералы даты и времени
//Дата -YYYY-MM-DD, YYYYMMDD
Вместо разделителя "-" можно использовать любой знак препинания.
Например:
'2020-01-01' = 1 января 2020
//Время - hh:mm:ss, hh:mm, hh, ss
Разделитель тоже можно опустить.
Например:
12:11 = 12:11:00
//Дата и время - YYYY-MM-DD hh:mm:ss, YYYYMMDDhhmmss
Например:
'20200101183030' = 1 января 2020, 18:30:30
//Логические литералы
Логический литерал - значения TRUE и FALSE, означающие истинность и ошибочность какого-либо утверждения. При интерпретации запроса, MySQL преобразует их в числа: TRUE и FALSE становятся 1 и 0 соответственно.
//NULL
Значение NULL означает "нет данных", "нет значения". Оно нужно, чтобы отличать визуально пустые значения, такие как строка нулевой длины или "пробел", от того, когда значения вообще нет, даже пустого.
3)Применение функций
SELECT UPPER("Hello world") AS upper_string; - функция UPPER преобразует все буквы строки к верхнему регистру
//Встроенная функция – реализованный в СУБД кусок кода, с помощью которого можно выполнять преобразования строковых, числовых и других данных в запросах.
//функция NOW() принимает ноль аргументов и возвращает литерал в формате даты
//LOWER
SELECT LOWER('SQL Academy') AS lower_string;
Возвращает строку, в которой все символы записаны в нижнем регистре
//YEAR
SELECT YEAR("2022-06-16") AS year;
Возвращает год для указанной даты
//INSTR
SELECT INSTR('sql-academy', 'academy') AS idx;
Осуществляет поиск подстроки в строке, возвращая позицию её первого символа. При этом отсчёт начинается с единицы, а не нуля, как в большинстве языков программирования.
//LENGTH
SELECT LENGTH('sql-academy') AS str_length;
Возвращает длину указанной строки.
//Пример SELECT UPPER(LEFT('sql-academy', 3)) AS str;
//Вывод SQL
//Задачки
1.Выведите текст "Hello world" в нижнем регистре с помощью соответствующей функции- SELECT LOWER("Hello world") AS lower_string
2.Выведите полное имя члена семьи и его год рождения, используя функцию YEAR.SELECT member_name, YEAR(birthday) AS year_of_birth FROM FamilyMembers
3.Выведите полное имя члена семьи и длину его фамилии. SELECT member_name, LENGTH(member_name)-INSTR(member_name,' ') AS lastname_length FROM FamilyMembers
//
4)Исключение дубликатов, DISTINCT
//В некоторых ситуациях SQL запрос на выборку может возвращать повторяющиеся строки данных.
SELECT [DISTINCT] поля_таблиц FROM наименование_таблицы  - Чтобы при выборке избежать такого дублирования, есть оператор DISTINCT.
//То есть в нашем случае запрос на получение уникальных классов, в которых есть хотя бы один студент, будет выглядеть следующим образом: SELECT DISTINCT class FROM Student_in_class;
//При использовании оператора DISTINCT для двух и более колонок будут удаляться записи, которые имеют одинаковые значения по всем полям.
//запрос с оператором DISTINCT вернул бы все сочетания имён и фамилий кроме дублирующихся «John Scott».можно проверять на совпадения нескольких колонок
SELECT DISTINCT first_name, last_name FROM User;
//Задания
1.Выведите только уникальные имена first_name студентов из таблицы Student. SELECT DISTINCT first_name FROM Student
2.Выведите только уникальные пары значений идентификатор учителя teacher и идентификатор предмета subject из таблицы Schedule. SELECT DISTINCT teacher,subject FROM Schedule
//
5)Условный оператор WHERE
//Ситуация, когда требуется сделать выборку по определённому условию, встречается очень часто. Для этого в операторе SELECT существует оператор WHERE, после которого следуют условия для ограничения строк. 
SELECT [DISTINCT] поля_таблиц FROM наименование_таблицы
WHERE условие_на_ограничение_строк
[логический_оператор другое_условие_на_ограничение_строк];
//Пример
SELECT * FROM Student
WHERE first_name = "Grigorij" AND YEAR(birthday) > 2000;
//Операторы сравнения
Оператор	Обозначение	Описание
Равенство	=	Если оба значения равны, то результат будет равен 1, иначе 0
Эквивалентность	<=>	Аналогичен оператору равенства, за исключением того, что результат будет равен 1 в случае сравнения NULL с NULL и 0, когда идёт сравнение любого значения с NULL
Неравенство	<> или !=	Если оба значения не равны, то результат будет равен 1, иначе 0
Меньше	<	Если одно значение меньше другого, то результат будет равен 1, иначе 0
Меньше или равно	<=	Если одно значение меньше или равно другому, то результат будет равен 1, иначе 0
Больше	>	Если одно значение больше другого, то результат будет равен 1, иначе 0
Больше или равно	>=	Если одно значение больше или равно другому, то результат будет равен 1, иначе 0
//Результатом сравнения любого значения с NULL является NULL.
//Логические операторы
Логические операторы необходимы для связывания операторов сравнения.
Оператор	Описание
NOT	Меняет значение оператора сравнения на противоположный
OR	Возвращает общее значение выражения истинно, если хотя бы одно из них истинно
AND	Возвращает общее значение выражения истинно, если они оба истинны
XOR	Возвращает общее значение выражения истинно, если один и только один аргумент является истинным
//Задачки 
1.Выведите идентификаторы товаров (поле good) из таблицы Payments, стоимость которых больше 2000 единиц. Стоимость товара хранится в поле unit_price. 
SELECT good FROM Payments WHERE unit_price>2000
2. Выведите имена (поле member_name) членов семьи из таблицы FamilyMembers, чей статус (поле status) равен "father".
SELECT member_name FROM FamilyMembers WHERE status = 'father'
3.Выведите имя (поле member_name) и дату рождения (поле birthday) членов семьи из таблицы FamilyMembers, чей статус (поле status) равен "father" или "mother".
SELECT member_name, birthday FROM FamilyMembers WHERE status = 'father' or status = 'mother'
4.Необходимо получить все комнаты, в которых есть как кухня (поле has_kitchen), так и интернет (поле has_internet). Напишите запрос, удовлетворяющий вышеописанному условию, который выводит все поля из таблицы Rooms.
Наличие обозначается 1 или true, а отсутствие 0 или false.
SELECT * FROM Rooms WHERE has_kitchen = 1 AND has_internet= 1
6)Операторы IS NULL, BETWEEN, IN
//IS NULL
Оператор IS NULL позволяет узнать, равно ли проверяемое значение NULL, т.е. пустое ли значение.
SELECT * FROM Teacher
WHERE middle_name IS NULL;
//BETWEEN
Оператор BETWEEN min AND max позволяет узнать, расположено ли проверяемое значение столбца в интервале между min и max, включая сами значения min и max. Он идентичен условию:
SELECT * FROM Payments
WHERE unit_price BETWEEN 100 AND 500;
//IN
Оператор IN позволяет узнать, входит ли проверяемое значение столбца в список определённых значений.
SELECT * FROM FamilyMembers
WHERE status IN ('father', 'mother');
//Задачки
1.Выведите имена first_name и фамилии last_name студентов из таблицы Student, у кого отсутствует отчество middle_name 
SELECT first_name,last_name FROM Student WHERE middle_name IS NULL
2.Выведите резервации комнат (поля room_id, start_date, end_date) из таблицы Reservations, у которых итоговая стоимость аренды (поле total) находится в промежутке от 500 до 1200 включительно.
SELECT room_id, start_date, end_date FROM Reservations WHERE total BETWEEN 500 AND 1200
3.Выведите информацию о студентах из таблицы Student, у которых год рождения соответствует одному из перечисленных: 2000, 2002 и 2004.
SELECT * FROM Student WHERE YEAR(birthday) IN (2000,2002,2004);

7)Оператор LIKE И ESCAPE-символ
//Оператор LIKE используется при условных запросах, когда мы хотим узнать, соответствует ли строка определённому шаблону.
//Синтаксис
WHERE поле_таблицы [NOT] LIKE шаблон_строки
//Шаблон может включать следующие специальные символы:
Символ	Описание
%	Последовательность любых символов (число символов в последовательности может быть от 0 и более)
_	Любой единичный символ
//
SELECT email FROM Users
WHERE email LIKE '%@hotmail.%'
//Вывод - 
barjam@hotmail.com
metzzo@hotmail.com
kostas@hotmail.com
//ESCAPE-символ
ESCAPE-символ используется для экранирования специальных символов (% и \). В случае если вам нужно найти строки, вы можете использовать ESCAPE-символ.
// Пример для 3 %
SELECT job_id FROM Jobs
WHERE progress LIKE '3!%' ESCAPE '!';
// Задачка
1. Найдите всех членов семьи с фамилией "Quincey" и выведите поле member_name
SELECT member_name 
FROM FamilyMembers
WHERE member_name LIKE '%Quincey'
//
8)Оператор REGEXP
Оператор REGEXP (или его синоним RLIKE) в SQL используется для поиска и обработки строковых данных с помощью регулярных выражений. (берем когда трудные случаи шаблона LIKE)
Например, поиск по нескольким условиям или использование специальных символов и диапазонов, оператор REGEXP станет незаменимым инструментом.
//Специальные символы и структуры
Символы и структуры	Чему соответствует
*	0 или более экземпляров предшествующей строки
+	1 или более экземпляров предшествующих строк
.	Любой одиночный символ
?	0 или 1 экземпляр предшествующей строки
^	Соответствует началу строки
$	Соответствует окончанию строки
[abc]	Любой символ, указанный в квадратных скобках
[^abc]	Любой символ, не указанный в квадратных скобках
[A-Z], [А-Я]	Соответствует любой заглавной букве латинского и кириллического алфавита соответственно
[a-z], [а-я]	Соответствует любой строчной букве латинского и кириллического алфавита соответственно
[0-9]	Соответствует любой цифре
p1|p2|p3	Соответствует любому из паттернов p1 или p2 или p3
{n}	n экземпляров предыдущей строки
{m,n}	от m до n экземпляров предыдущей строки
//Примеры
1.SELECT * FROM Users WHERE name REGEXP '^John'
Это выражение ищет строки, начинающиеся с «John». Символ ^ указывает на начало строки.
2.SELECT * FROM  Subject WHERE name REGEXP '[ey]$'
Выведем все школьные предметы, название которых оканчивается на букву «e» или «y»
//
//Задачки
1.Найдите все жилые помещения (таблица Rooms), в адресе которых содержится строка «Avenue». В результирующей выборке выведите поля id и address. 
SELECT id,address FROM Rooms WHERE address REGEXP 'Avenue'
2.Выведите name, email пользователей, чей адрес электронной почты заканчивается на «@outlook.com» или «@live.com».
SELECT name,email FROM Users WHERE EMAIL REGEXP '@(outlook.com|live.com)$'
//
9)Сортировка, оператор ORDER BY
При выполнении SELECT запроса, строки по умолчанию возвращаются в неопределённом порядке. Фактический порядок строк в этом случае зависит от плана соединения и сканирования, а также от порядка расположения данных на диске, поэтому полагаться на него нельзя. Для упорядочивания записей используется конструкция ORDER BY.
(Где ASC и DESC - направление сортировки:
ASC - сортировка по возрастанию (по умолчанию)
DESC - сортировка по убыванию)
Например, выведем названия авиакомпаний в алфавитном порядке из таблицы Company: SELECT name FROM Company ORDER BY name;
//Для сортировки результатов по двум или более столбцам их следует указывать через запятую.
ORDER BY столбец_1 [ASC | DESC], столбец_2 [ASC | DESC];
Данные будут сортироваться по первому столбцу, но в случае если попадаются несколько записей с совпадающими значениями в первом столбце, то они сортируются по второму столбцу.
//Пример: Выведем информацию о полётах, отсортированную по городу вылета самолёта в порядке возрастания и по городу прибытия в аэропорт в порядке убывания, из таблицы Trip:
SELECT DISTINCT town_from, town_to FROM Trip
ORDER BY town_from, town_to DESC;
//Задачки
1. Для каждого отдельного платежа выведите идентификатор товара и сумму, потраченную на него, в отсортированном по убыванию этой суммы виде. Список платежей находится в таблице Payments.
Для вывода суммы используйте псевдоним sum.
SELECT good,unit_price*amount AS sum FROM Payments ORDER BY sum DESC
2.Выведите все данные членов семьи с фамилией Quincey из таблицы FamilyMembers и отсортируйте их по возрастанию сначала по столбцу status, а затем по member_name.
SELECT * FROM FamilyMembers WHERE member_name REGEXP 'Quincey$' ORDER BY status ASC, member_name ASC
//
10)Группировка, оператор GROUP BY
SELECT [литералы, агрегатные_функции, поля_группировки]
FROM имя_таблицы
GROUP BY поля_группировки;
//Для того, чтобы записи у нас образовали группы по типу жилья, мы должны после GROUP BY указать home_type, т.е. поле, по которому будет происходить группировка. 
SELECT home_type FROM Rooms
GROUP BY home_type
ВЫВОД:
home_type
Private room
Entire home/apt
Shared room
!!!!!Следует иметь в виду, что для GROUP BY все значения NULL трактуются как равные, т.е. при группировке по полю, содержащему NULL-значения, все такие строки попадут в одну группу
При использовании GROUP BY мы можем выводить только:
)литералы, т.е. указанное явным образом фиксированные значения.(SELECT home_type, "literal" FROM Rooms GROUP BY home_type)
)результаты агрегатных функций, т.е. вычисленные значения на основании набора значений.(SELECT home_type, AVG(price) as avg_price FROM Rooms GROUP BY home_type)
!!!Функция AVG принимает в качестве аргумента название поля, по которому мы хотим вычислить среднее значение для каждой группы.
)поля группировки. Мы можем их выводить, так как в рамках одной группы поля, по которым осуществлялась группировка, одинаковые.
///НУЖНЫЕ ШТУКИ ДЛЯ РАБОТЫ С ДАТАМИ И ВРЕМЕНЕМ 
TIMEDIFF(time_in, time_out) as flight_time  - ДЛЯ ВЫВОДА РАЗНИЦЫ ВО ВРЕМЕНИ В ФОРМАТЕ НН:ММ:SS
DATEDIFF(DATE_in, DATE_out) as VACATION  - ДЛЯ ВЫВОДА РАЗНИЦУ МЕЖДУ ДАТАМИ
12)Многотабличные запросы, JOIN
//Общая структура многотабличного запроса
SELECT поля_таблиц
FROM таблица_1
[INNER] | [[LEFT | RIGHT | FULL][OUTER]] JOIN таблица_2
    ON условие_соединения
[[INNER] | [[LEFT | RIGHT | FULL][OUTER]] JOIN таблица_n
    ON условие_соединения]
//Как можно увидеть по структуре, соединение бывает:
)внутренним INNER (по умолчанию)(подробнее в пункте 13)
)внешним OUTER, при этом внешнее соединение делится на левое LEFT, правое RIGHT и полное FULL(подробнее в пункте 14)
//Чтобы сопоставление работало, мы указываем как именно записи из двух разных таблиц должны находить друг друга. Это условие указывается после ON:
ON Payments.family_member = FamilyMembers.member_id(В большинстве случаев условием соединения является равенство столбцов таблиц (таблица_1.поле = таблица_2.поле), однако точно так же можно использовать и другие операторы сравнения.)
//Вывод всех столбцов из таблицы в многотабличном запросе. Таким же образом можно вывести все столбцы из нескольких таблиц:
SELECT Payments.*, FamilyMembers.* FROM Payments
INNER JOIN FamilyMembers
    ON Payments.family_member = FamilyMembers.member_id
//Псевдонимы для таблиц 
Псевдонимы задаются после имени таблицы с помощью ключевого слова AS:
SELECT id, name
FROM Passenger AS pass
13)Внутреннее соединение INNER JOIN
//Говоря о многотабличном запросе со внутренним соединением, общая структура выглядит так:
SELECT поля_таблиц
FROM таблица_1
[INNER] JOIN таблица_2
    ON условие_соединения
[[INNER] JOIN таблица_n
    ON условие_соединения]
!!!!Внутреннее соединение — соединение, при котором находятся пары записей из двух таблиц, удовлетворяющие условию соединения, тем самым образуя новую таблицу, содержащую поля из первой и второй исходных таблиц.
Например в нашем условии указано равенство полей Payments.good_id и Goods.good_id, то при внутреннем соединении в итоговой выборке окажутся только записи, где в обеих таблицах есть одинаковое значение good_id.
/////Для внутреннего соединения таблиц также можно использовать оператор WHERE. Например, вышеприведённый запрос, написанный с помощью INNER JOIN, будет выглядеть так:
SELECT family_member, member_name FROM Payments, FamilyMembers
    WHERE Payments.family_member = FamilyMembers.member_id
14)Внешнее соединение OUTER JOIN
///Внешнее соединение может быть трёх типов: левое (LEFT), правое (RIGHT) и полное (FULL). По умолчанию оно является полным.
!!!!Главным отличием внешнего соединения от внутреннего является то, что оно обязательно возвращает все строки одной (LEFT, RIGHT) или двух таблиц (FULL).
///Внешнее левое соединение (LEFT OUTER JOIN)
Соединение, которое возвращает все значения из левой таблицы, соединённые с соответствующими значениями из правой таблицы, если они удовлетворяют условию соединения, или заменяет их на NULL в обратном случае.
///Внешнее правое соединение (RIGHT OUTER JOIN)
Соединение, которое возвращает все значения из правой таблицы, соединённые с соответствующими значениями из левой таблицы, если они удовлетворяют условию соединения, или заменяет их на NULL в обратном случае.
///Внешнее полное соединение (FULL OUTER JOIN)
Соединение, которое выполняет внутреннее соединение записей и дополняет их левым внешним соединением и правым внешним соединением.
SELECT *
FROM левая_таблица
LEFT JOIN правая_таблица
   ON правая_таблица.ключ = левая_таблица.ключ

UNION ALL

SELECT *
FROM левая_таблица
RIGHT JOIN правая_таблица
ON правая_таблица.ключ = левая_таблица.ключ
 WHERE левая_таблица.ключ IS NULL
15)Ограничение выборки, оператор LIMIT
Оператор LIMIT позволяет извлечь определённый диапазон записей из одной или нескольких таблиц.
///Общая структура запроса с оператором LIMIT
SELECT поля_выборки
FROM список_таблиц
LIMIT [количество_пропущенных_записей,] количество_записей_для_вывода;
///Оператор LIMIT реализован не во всех СУБД, например, в MSSQL для вывода записей с начала таблицы используется оператор TOP, а для тех случаев, когда необходимо сделать отступ от начала таблицы, предназначена конструкция OFFSET FETCH.
///Для того, чтобы вывести строки с 3 по 5, нужно использовать такой запрос:
SELECT * FROM Company LIMIT 2, 3;
// Первые 2 строки 
SELECT * FROM Company LIMIT 2;
16)Подзапросы
Подзапрос — это запрос, использующийся в другом SQL запросе. Подзапрос всегда заключён в круглые скобки и обычно выполняется перед основным запросом.
Как и любой другой SQL запрос, подзапрос возвращает результирующий набор, который может быть одним из следующих:
)одна строка и один столбец;
)нескольких строк с одним столбцом;
)нескольких строк с несколькими столбцами.
///Получим список всех бронирований самого дорогого на данный момент жилого помещения:
SELECT * FROM Reservations
    WHERE Reservations.room_id = (
        SELECT id FROM Rooms ORDER BY price DESC LIMIT 1
    )
17)Подзапрос с одной строкой с одним столбцом
Данный тип подзапросов также известен как скалярный подзапрос.
Он может использоваться в различных частях основного SQL запроса, но чаще всего он используется в условиях ограничений выборки с помощью операторов сравнения (=, <>, >, <).
////Таким же образом можно использовать скалярные подзапросы для фильтрации строк с помощью WHERE, используя операторы сравнения.
SELECT * FROM FamilyMembers
    WHERE birthday = (SELECT MAX(birthday) FROM FamilyMembers);
member_id	status	member_name	birthday
8	daughter	Wednesday Addams	2005-01-13T00:00:00.000Z
/////С помощью данного запроса возможно получить самого младшего члена семьи. Подзапрос в данном случае необходим для получения максимальной даты рождения, которая затем используется в основном запросе для фильтрации строк.
18)Подзапросы с несколькими строками и одним столбцом
!!!!Если подзапрос возвращает более одной строки, его нельзя просто использовать с операторами сравнения.
//Подзапрос и оператор ALL
С помощью оператора ALL мы можем сравнивать отдельное значение с каждым значением в наборе, полученным подзапросом.  При этом данное условие вернёт TRUE, только если все сравнения отдельного значения со значениями в наборе вернут TRUE.
///Например, нижеприведённый синтетический запрос проверяет для всех ли жилых помещений выполняется условие, что оно дешевле чем 200.
SELECT 200 > ALL(SELECT price FROM Rooms)
///Подзапрос и оператор IN
Оператор IN проверяет входит ли конкретное значение в набор значений. В качестве такого набора как раз может использоваться подзапрос, возвращающий несколько строк с одним столбцом.
////SELECT * FROM Users WHERE id IN (
    SELECT DISTINCT owner_id FROM Rooms WHERE price >= 150)
///Подзапрос и оператор ANY
Условное выражение с ANY имеет схожее поведение, но оно возвращает TRUE, если хотя бы одно сравнение отдельного значения со значением в наборе вернёт TRUE.
//SELECT * FROM Users WHERE id = ANY (
    SELECT DISTINCT owner_id FROM Rooms WHERE price >= 150
)
19)Многостолбцовые подзапросы
Сравнение по нескольким столбцам
SQL поддерживает сравнение не только по одной колонке, но позволяет попарно сравнивать значения в основном запросе со значениями в подзапросе.
///SQL поддерживает сравнение не только по одной колонке, но позволяет попарно сравнивать значения в основном запросе со значениями в подзапросе.
SELECT * FROM Reservations
    WHERE (room_id, price) IN (SELECT id, price FROM Rooms);
20)Коррелированные подзапросы
Все предыдущие рассматриваемые подзапросы были некоррелированные (независимые). Они могли выполняться автономно от основного запроса и мы могли посмотреть, что они возвращают перед тем, как их результат будет использоваться в основном запросе.
Коррелированные же подзапросы ссылаются на один или несколько столбцов основного запроса.
Например, следующий коррелируемый подзапрос находит кто и сколько потратил:
SELECT FamilyMembers.member_name, (
    SELECT SUM(Payments.unit_price * Payments.amount)
    FROM Payments
    WHERE Payments.family_member = FamilyMembers.member_id
) AS total_spent
FROM FamilyMembers;
///Коррелированный подзапрос отличается от некоррелированного подзапроса тем, что он выполняется не один раз перед выполнением запроса, в который он вложен, а для каждой строки, которая может быть включена в окончательный результат.
!!!!!Следует обратить внимание на то, что использование коррелированных подзапросов может вызвать проблемы с производительностью, особенно если содержащий запрос возвращает много строк, так как коррелированный подзапрос будет выполняться для каждой строки содержащего запроса отдельно.
21)Обобщенное табличное выражение, оператор WITH
Обобщённое табличное выражение или CTE (Common Table Expressions) - это временный результирующий набор данных, к которому можно обращаться в последующих запросах. Для написания обобщённого табличного выражения используется оператор WITH.
WITH Aeroflot_trips AS
    (SELECT TRIP.* FROM Company
        INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Aeroflot")

SELECT plane, COUNT(plane) AS amount FROM Aeroflot_trips GROUP BY plane;
///Выражение с WITH считается «временным», потому что результат не сохраняется где-либо на постоянной основе в схеме базы данных,
а действует как временное представление, которое существует только на время выполнения запроса, то есть оно доступно только во время выполнения операторов SELECT, INSERT, UPDATE, DELETE или MERGE.
///Порядок использования оператора WITH:
1)Ввести оператор WITH
2)Указать название обобщённого табличного выражения
3)Опционально: определить названия для столбцов получившегося табличного выражения, разделённых знаком запятой
4)Ввести AS и далее подзапрос, результат которого можно будет использовать в других частях SQL запроса, используя имя, определённое на 2 этапе
5)Опционально: если необходимо более одного табличного выражения, то ставится запятая и повторяются шаги 2-4
///Cоздаём табличное выражение Aeroflot_trips, но с переименованными колонками
WITH Aeroflot_trips (aeroflot_plane, town_from, town_to) AS
    (SELECT plane, town_from, town_to FROM Company
        INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Aeroflot")

SELECT * FROM Aeroflot_trips;
///С помощью оператора WITH определяем несколько табличных выражений
WITH Aeroflot_trips AS
    (SELECT TRIP.* FROM Company
        INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Aeroflot"),
    Don_avia_trips AS
    (SELECT TRIP.* FROM Company
        INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Don_avia")

SELECT * FROM Don_avia_trips UNION SELECT * FROM  Aeroflot_trips;
///Работа с рекурсией в CTE
CTE также могут быть использованы для выполнения рекурсивных запросов, которые позволяют итеративно обрабатывать данные, например, для работы с иерархическими структурами данных, такими как «руководитель — подчинённый».
Рекурсивное CTE состоит из двух частей, разделенных оператором UNION ALL:
1)Начальный набор данных, который не содержит рекурсивных ссылок.
2)Рекурсивная часть: запрос, который ссылается на CTE, чтобы продолжить рекурсию.
//
WITH RECURSIVE название_cte (столбец_1, столбец_2, ...) AS (
    -- Начальный набор данных
    SELECT столбец_1, столбец_2, ...
    FROM таблица
    WHERE условие

    UNION ALL

    -- Рекурсивная часть
    SELECT столбец_1, столбец_2, ...
    FROM название_cte
    INNER JOIN таблица ON название_cte.столбец = таблица.столбец
    WHERE условие
)

SELECT * FROM название_cte;
///Пример: иерархия руководителей и подчинённых
Требуется найти всех подчинённых John Smith (id=1) на всех уровнях иерархии.
WITH RECURSIVE Subordinates AS (
    -- Начальный набор данных
    SELECT id, name, managerId
    FROM Employees
    WHERE managerId = 1

    UNION ALL

    -- Рекурсивная часть: подчинённые подчинённых
    SELECT e.id, e.name, e.managerId
    FROM Employees e
    INNER JOIN Subordinates s ON e.managerId = s.id
)

SELECT * FROM Subordinates;
///Шаги выполнения рекурсивного CTE
Начальный набор данных: выбираются все сотрудники, у которых managerId=1 (непосредственные подчинённые John Smith).
Рекурсивная часть: для каждого сотрудника, выбранного в начальном наборе данных, выбираются их подчинённые (где managerId равен id выбранного сотрудника).
Объединение: результаты начального набора данных и рекурсивной частей объединяются с помощью UNION ALL.
Рекурсия: процесс повторяется для каждого нового набора подчинённых, пока не будут выбраны все уровни иерархии.
22)Объединение запросов, оператор Union
Результаты выполнения SQL запросов можно объединять. Для этого существует оператор UNION.
///Общая структура запроса с оператором UNION
SELECT поля_таблиц FROM список_таблиц ...
UNION [ALL]
SELECT поля_таблиц FROM список_таблиц ... ;
